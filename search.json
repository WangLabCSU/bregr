[{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://wanglabcsu.github.io/bregr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. bregr  Copyright (C) 2025  Shixiang Wang and bregr developer team This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://wanglabcsu.github.io/bregr/articles/model-config.html","id":"interaction-terms","dir":"Articles","previous_headings":"","what":"Interaction Terms","title":"Model Configurations","text":"bregr package provides comprehensive support processing visualization interaction terms regression models, provided interaction term inherently supported model. illustrative example using linear model: Examine results: Visualize results:  Additionally, specified models can visualized using functions provided bregr:  compare :","code":"rv <- br_pipeline(   data = mtcars,   y = \"mpg\", x = c(\"cyl\", \"disp*hp\"), x2 = \"am\",   method = \"lm\" ) br_get_results(rv, tidy = TRUE) #> # A tibble: 6 × 8 #>   Focal_variable term    estimate std.error statistic p.value conf.low conf.high #>   <chr>          <chr>      <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 cyl            cyl     -2.50e+0 0.361         -6.93 1.28e-7 -3.24e+0 -1.76     #> 2 cyl            am       2.57e+0 1.29           1.99 5.64e-2 -7.42e-2  5.21     #> 3 disp*hp        disp    -5.42e-2 0.0186        -2.92 7.06e-3 -9.23e-2 -0.0160   #> 4 disp*hp        hp      -9.20e-2 0.0244        -3.77 8.16e-4 -1.42e-1 -0.0419   #> 5 disp*hp        am       2.29e+0 1.45           1.57 1.27e-1 -6.96e-1  5.27     #> 6 disp*hp        disp:hp  2.27e-4 0.0000938      2.42 2.26e-2  3.45e-5  0.000419 br_show_forest(rv) br_show_forest_ggstats(rv, idx = 2) br_show_forest_ggstats(rv)"},{"path":"https://wanglabcsu.github.io/bregr/articles/model-config.html","id":"customized-glm-family","dir":"Articles","previous_headings":"","what":"Customized GLM Family","title":"Model Configurations","text":"GLM models, family object can customized various arguments. default, bregr directly supports GLM family functions default arguments, can viewed using: However, alternative GLM configurations, modifications can made directly. instance, consider following example using quasi-family specified variance link functions: equivalent :","code":"br_avail_methods() #>  [1] \"lm\"               \"coxph\"            \"survreg\"          \"clogit\"           #>  [5] \"cch\"              \"binomial\"         \"gaussian\"         \"Gamma\"            #>  [9] \"inverse.gaussian\" \"poisson\"          \"quasi\"            \"quasibinomial\"    #> [13] \"quasipoisson\"     \"nls\"              \"aov\" data <- data.frame(   x = rnorm(100) ) data$y <- rpois(100, exp(1 + data$x)) head(data) #>              x  y #> 1 -1.400043517  0 #> 2  0.255317055  7 #> 3 -2.437263611  0 #> 4 -0.005571287  0 #> 5  0.621552721  3 #> 6  1.148411606 12 rv <- br_pipeline(   data = data,   y = \"y\", x = \"x\",   method = 'quasi(variance = \"mu\", link = \"log\")' ) #> Warning: nonstandard method `quasi(variance = \"mu\", link = \"log\")` passed to #> `stats::glm()`, double-check if it's correct br_get_results(rv, tidy = TRUE) #> # A tibble: 1 × 8 #>   Focal_variable term  estimate std.error statistic  p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>    <dbl>    <dbl>     <dbl> #> 1 x              x        0.952    0.0446      21.4 1.14e-38    0.865      1.04 glm(y ~ x, data = data, family = quasi(variance = \"mu\", link = \"log\")) |>   summary() #>  #> Call: #> glm(formula = y ~ x, family = quasi(variance = \"mu\", link = \"log\"),  #>     data = data) #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)     #> (Intercept)  1.06874    0.06587   16.23   <2e-16 *** #> x            0.95234    0.04456   21.37   <2e-16 *** #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 #>  #> (Dispersion parameter for quasi family taken to be 1.041366) #>  #>     Null deviance: 582.56  on 99  degrees of freedom #> Residual deviance: 108.46  on 98  degrees of freedom #> AIC: NA #>  #> Number of Fisher Scoring iterations: 5"},{"path":"https://wanglabcsu.github.io/bregr/articles/quick-analyze-cancer-data.html","id":"obtain-data","dir":"Articles","previous_headings":"","what":"Obtain Data","title":"Quickly Analyze Cancer Data with Data from UCSCXenaShiny","text":"","code":"data <- inner_join(   tcga_clinical_fine,   tcga_surv |> select(sample, OS, OS.time),   by = c(\"Sample\" = \"sample\") ) |> filter(!is.na(Stage_ajcc), !is.na(Gender)) head(data) #> # A tibble: 6 × 10 #>   Sample Cancer   Age Code  Gender Stage_ajcc Stage_clinical Grade    OS OS.time #>   <chr>  <chr>  <dbl> <chr> <chr>  <chr>      <chr>          <chr> <dbl>   <dbl> #> 1 TCGA-… ACC       58 TP    MALE   Stage II   NA             NA        1    1355 #> 2 TCGA-… ACC       44 TP    FEMALE Stage IV   NA             NA        1    1677 #> 3 TCGA-… ACC       23 TP    FEMALE Stage III  NA             NA        0    2091 #> 4 TCGA-… ACC       30 TP    MALE   Stage III  NA             NA        1     365 #> 5 TCGA-… ACC       29 TP    FEMALE Stage II   NA             NA        0    2703 #> 6 TCGA-… ACC       30 TP    FEMALE Stage III  NA             NA        1     490"},{"path":"https://wanglabcsu.github.io/bregr/articles/quick-analyze-cancer-data.html","id":"execute-bregr-pipeline","dir":"Articles","previous_headings":"","what":"Execute bregr Pipeline","title":"Quickly Analyze Cancer Data with Data from UCSCXenaShiny","text":"Assessing influence AJCC Stage overall survival can done analyzing data grouped gender.","code":"m <- br_pipeline(   data = data,   y = c(\"OS.time\", \"OS\"),   x = \"Stage_ajcc\", x2 = \"Age\",   group_by = \"Gender\",   method = \"coxph\" ) #> exponentiate estimates of model(s) constructed from coxph method #> at default m #> A object of <breg> class with slots: #> • y (response variable): OS.time and OS #> • x (focal term): Stage_ajcc #> • x2 (control term): Age #> • group_by: Gender #> • data: <tibble[,11]> #> • config: <list: method = \"coxph\", extra = \"\"> #> • models: <list: FEMALE_Stage_ajcc = <coxph>, MALE_Stage_ajcc = <coxph>, and #> All_Stage_ajcc = <coxph>> #> • results: <tibble[,22]> with colnames Group_variable, Focal_variable, term, #> variable, var_label, var_class, var_type, var_nlevels, contrasts, #> contrasts_type, reference_row, label, n_obs, n_ind, n_event, exposure, #> estimate, std.error, …, conf.low, and conf.high #> • results_tidy: <tibble[,9]> with colnames Group_variable, Focal_variable, #> term, estimate, std.error, statistic, p.value, conf.low, and conf.high #>  #> Focal term(s) are injected into the model one by one, #> while control term(s) remain constant across all models in the batch. br_get_results(m, tidy = TRUE) |>   knitr::kable()"},{"path":"https://wanglabcsu.github.io/bregr/articles/quick-analyze-cancer-data.html","id":"generate-visualizations","dir":"Articles","previous_headings":"","what":"Generate Visualizations","title":"Quickly Analyze Cancer Data with Data from UCSCXenaShiny","text":"example:","code":"m <- br_rename_models(m, c(\"Female\", \"Male\", \"All\")) #> rename model names from \"FEMALE_Stage_ajcc\", \"MALE_Stage_ajcc\", and #> \"All_Stage_ajcc\" to \"Female\", \"Male\", and \"All\"  br_show_forest_ggstats(m)"},{"path":"https://wanglabcsu.github.io/bregr/articles/quick-analyze-cancer-data.html","id":"explore-further","dir":"Articles","previous_headings":"","what":"Explore Further","title":"Quickly Analyze Cancer Data with Data from UCSCXenaShiny","text":"Besides, using tcga_surv_get(), can efficiently retrieve values specified gene (c(\"mRNA\", \"miRNA\", \"methylation\", \"transcript\", \"protein\", \"mutation\", \"cnv\")) TCGA cohort. comprehensive guidance querying various omics data different databases/cohorts, refer Molecular Data Query section UCSCXenaShiny tutorial book.","code":""},{"path":"https://wanglabcsu.github.io/bregr/articles/supported-models.html","id":"default-supported-models","dir":"Articles","previous_headings":"","what":"Default Supported Models","title":"Supported Models","text":"default, bregr package supports regression models defined R’s builtin packages, including stats survival. encompasses numerous common regression methodologies, generalized linear regressions (linear, logistic) Cox proportional hazards regression. comprehensive list supported model methods can retrieved using br_avail_methods() function: illustrative purposes, utilize pipeline function instead piped workflow maintain simplicity.","code":"br_avail_methods() #>  [1] \"lm\"               \"coxph\"            \"survreg\"          \"clogit\"           #>  [5] \"cch\"              \"binomial\"         \"gaussian\"         \"Gamma\"            #>  [9] \"inverse.gaussian\" \"poisson\"          \"quasi\"            \"quasibinomial\"    #> [13] \"quasipoisson\"     \"nls\"              \"aov\""},{"path":"https://wanglabcsu.github.io/bregr/articles/supported-models.html","id":"linear-models","dir":"Articles","previous_headings":"Default Supported Models","what":"Linear Models","title":"Supported Models","text":"focus results focal variables: corresponds “gaussian” family defined within generalized linear models.","code":"rv <- br_pipeline(   data = mtcars,   y = \"mpg\", x = c(\"cyl\", \"disp\", \"hp\"), x2 = \"am\",   method = \"lm\" ) br_get_results(rv, tidy = TRUE) #> # A tibble: 6 × 8 #>   Focal_variable term  estimate std.error statistic   p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #> 1 cyl            cyl    -2.50     0.361       -6.93   1.28e-7  -3.24     -1.76   #> 2 cyl            am      2.57     1.29         1.99   5.64e-2  -0.0742    5.21   #> 3 disp           disp   -0.0369   0.00578     -6.37   5.75e-7  -0.0487   -0.0250 #> 4 disp           am      1.83     1.44         1.28   2.12e-1  -1.10      4.77   #> 5 hp             hp     -0.0589   0.00786     -7.50   2.92e-8  -0.0750   -0.0428 #> 6 hp             am      5.28     1.08         4.89   3.46e-5   3.07      7.48 br_get_results(rv, tidy = TRUE) |>   dplyr::filter(Focal_variable == term) #> # A tibble: 3 × 8 #>   Focal_variable term  estimate std.error statistic   p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #> 1 cyl            cyl    -2.50     0.361       -6.93   1.28e-7  -3.24     -1.76   #> 2 disp           disp   -0.0369   0.00578     -6.37   5.75e-7  -0.0487   -0.0250 #> 3 hp             hp     -0.0589   0.00786     -7.50   2.92e-8  -0.0750   -0.0428 br_pipeline(   data = mtcars,   y = \"mpg\", x = c(\"cyl\", \"disp\", \"hp\"), x2 = \"am\",   method = \"gaussian\" ) |>   br_get_results(tidy = TRUE) |>   dplyr::filter(Focal_variable == term) #> # A tibble: 3 × 8 #>   Focal_variable term  estimate std.error statistic   p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #> 1 cyl            cyl    -2.50     0.361       -6.93   1.28e-7  -3.21     -1.79   #> 2 disp           disp   -0.0369   0.00578     -6.37   5.75e-7  -0.0482   -0.0255 #> 3 hp             hp     -0.0589   0.00786     -7.50   2.92e-8  -0.0743   -0.0435"},{"path":"https://wanglabcsu.github.io/bregr/articles/supported-models.html","id":"logistic-models","dir":"Articles","previous_headings":"Default Supported Models","what":"Logistic Models","title":"Supported Models","text":"modifying variables (terms) method, presented workflow can readily adapted supported method appropriate data. logistic regression model:","code":"br_pipeline(   data = mtcars,   y = \"vs\", x = c(\"cyl\", \"disp\", \"hp\"), x2 = \"am\",   method = \"binomial\" ) |>   suppressWarnings() |>   br_get_results(tidy = TRUE) |>   dplyr::filter(Focal_variable == term) #> exponentiate estimates of model(s) constructed from binomial #> method at default #> # A tibble: 3 × 8 #>   Focal_variable term  estimate std.error statistic p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 cyl            cyl   7.97e-10 5771.      -0.00363  0.997    NA     1.60e+143 #> 2 disp           disp  6.07e- 1    0.535   -0.933    0.351    NA     8.31e-  1 #> 3 hp             hp    8.88e- 1    0.0524  -2.28     0.0229    0.764 9.53e-  1"},{"path":"https://wanglabcsu.github.io/bregr/articles/supported-models.html","id":"cox-ph-models","dir":"Articles","previous_headings":"Default Supported Models","what":"Cox-PH Models","title":"Supported Models","text":"","code":"br_pipeline(   data = survival::lung,   y = c(\"time\", \"status\"),   x = c(\"ph.ecog\", \"ph.karno\", \"pat.karno\", \"meal.cal\"), x2 = c(\"age\", \"sex\"),   method = \"coxph\" ) |>   suppressWarnings() |>   br_get_results(tidy = TRUE) |>   dplyr::filter(Focal_variable == term) #> exponentiate estimates of model(s) constructed from coxph method #> at default #> # A tibble: 4 × 8 #>   Focal_variable term    estimate std.error statistic p.value conf.low conf.high #>   <chr>          <chr>      <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 ph.ecog        ph.ecog    1.59   0.114        4.08  4.45e-5    1.27      1.99  #> 2 ph.karno       ph.kar…    0.987  0.00588     -2.27  2.35e-2    0.975     0.998 #> 3 pat.karno      pat.ka…    0.981  0.00564     -3.38  7.22e-4    0.970     0.992 #> 4 meal.cal       meal.c…    1.000  0.000238    -0.563 5.74e-1    0.999     1.00"},{"path":"https://wanglabcsu.github.io/bregr/articles/supported-models.html","id":"extended-supported-models","dir":"Articles","previous_headings":"","what":"Extended Supported Models","title":"Supported Models","text":"Fundamentally, bregr leverages broom.helpers:::tidy_plus_plus() model result processing. Consequently, model supported broom.helpers compatible bregr, provided corresponding dependent packages installed. instances, model methods must configured using list comprising four elements. default supported model methods, configurations prebuilt within package can inspected using: f_call: string representing caller used construct model. f_cnst_y: function construct response term string format within model. models utilizing single variable, set NULL; however, models survival models typically employ Surv(time, status) response term, aforementioned function can utilized construct term user-specified y. args_method: string indicating additional configuration method definition. generalized linear models (GLM), method specified family. Generally, set NULL. args_data: string representing data argument. model function use data data input (e.g., data2 used instead), adjust accordingly (e.g., set “data2 = data”). required, set “data = data”. example, configure linear mixed model: Subsequently, utilize method argument:","code":"knitr::kable(   broom.helpers::supported_models ) br_avail_method_config(\"coxph\") #> $f_call #> survival::coxph #>  #> $f_cnst_y #> function (y)  #> { #>     glue::glue(\"survival::Surv({paste(y, collapse = ', ')})\") #> } #> <bytecode: 0x55fc52b811e0> #> <environment: 0x55fc57131b70> #>  #> $args_method #> NULL #>  #> $args_data #> data = data br_avail_method_config(\"binomial\") #> $f_call #> stats::glm #>  #> $f_cnst_y #> NULL #>  #> $args_method #> family = stats::binomial #>  #> $args_data #> data = data if (requireNamespace(\"lme4\")) {   md_config <- list(     f_call = \"lme4::lmer\",     f_cnst_y = NULL,     args_method = NULL,     args_data = \"data = data\"   ) } #> Loading required namespace: lme4 if (requireNamespace(\"lme4\") && requireNamespace(\"merDeriv\") && requireNamespace(\"broom.mixed\")) {   br_pipeline(     data = lme4::sleepstudy,     y = \"Reaction\",     x = c(\"Days\", \"Subject\"), x2 = \"(Days | Subject)\",     method = md_config   ) |>     # br_get_results(tidy = TRUE)     br_show_table(export = TRUE, args_table_export = list(format = \"html\")) } #> Loading required namespace: merDeriv #> Loading required namespace: broom.mixed #> Warning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : #> unable to evaluate scaled gradient #> Warning in checkConv(attr(opt, \"derivs\"), opt$par, ctrl = control$checkConv, : #> Model failed to converge: degenerate Hessian with 1 negative eigenvalues"},{"path":"https://wanglabcsu.github.io/bregr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Shixiang Wang. Author, maintainer. Yun Peng. Author. Chenyang Shu. Author.","code":""},{"path":"https://wanglabcsu.github.io/bregr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang S, Peng Y, Shu C (2025). bregr: Easy Efficient Batch Processing Regression Models. R package version 1.0.0.9000, https://github.com/WangLabCSU/bregr.","code":"@Manual{,   title = {bregr: Easy and Efficient Batch Processing of Regression Models},   author = {Shixiang Wang and Yun Peng and Chenyang Shu},   year = {2025},   note = {R package version 1.0.0.9000},   url = {https://github.com/WangLabCSU/bregr}, }"},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":null,"dir":"","previous_headings":"","what":"GitHub Copilot Instructions for bregr R Package","title":"GitHub Copilot Instructions for bregr R Package","text":"file contains comprehensive instructions GitHub Copilot effectively work bregr R package repository.","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"repository-overview","dir":"","previous_headings":"","what":"Repository Overview","title":"GitHub Copilot Instructions for bregr R Package","text":"bregr package R package easy efficient batch processing regression models. provides tools running univariate multivariate regression models batch, returning results tidy format visualization capabilities.","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"package-structure","dir":"","previous_headings":"Repository Overview","what":"Package Structure","title":"GitHub Copilot Instructions for bregr R Package","text":"Type: Standard R package Language: R (>= 4.1.0) Testing: testthat framework Documentation: roxygen2 + pkgdown CI/CD: GitHub Actions R-CMD-check Dependencies: tidyverse ecosystem, statistical modeling packages","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"key-components","dir":"","previous_headings":"Repository Overview","what":"Key Components","title":"GitHub Copilot Instructions for bregr R Package","text":"R/: Core R functions batch regression modeling tests/testthat/: Unit tests example tests man/: Auto-generated documentation files vignettes/: Package vignettes tutorials data-raw/: Raw data processing scripts DESCRIPTION: Package metadata dependencies","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"r-installation-using-rig--pak---recommended","dir":"","previous_headings":"Development Environment Setup","what":"R Installation (Using rig + pak - RECOMMENDED)","title":"GitHub Copilot Instructions for bregr R Package","text":"Use modern R installation manager rig package installer pak optimal development experience: Timing: rig installation ~1 minute, R installation ~5-8 minutes","code":"# Install rig (R Installation Manager) curl -Ls https://github.com/r-lib/rig/releases/download/latest/rig-linux-latest.tar.gz | sudo tar xz -C /usr/local  # Install latest R release sudo rig add release  # Verify installation rig list R --version"},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"package-dependencies-installation","dir":"","previous_headings":"Development Environment Setup","what":"Package Dependencies Installation","title":"GitHub Copilot Instructions for bregr R Package","text":"Timing: Dependencies installation ~4-6 minutes, dev tools ~2-3 minutes","code":"# Navigate to package directory cd /path/to/bregr  # Install all package dependencies using pak (much faster than install.packages) R --slave -e \"pak::local_install_deps()\"  # Install additional development tools R --slave -e \"pak::pak(c('knitr', 'rmarkdown', 'testthat', 'pkgdown'))\""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"system-dependencies","dir":"","previous_headings":"Development Environment Setup","what":"System Dependencies","title":"GitHub Copilot Instructions for bregr R Package","text":"Essential system packages (automatically handled pak): - pandoc (vignettes documentation) - libxml2-dev, libcurl4-openssl-dev, libssl-dev (various R packages) - Graphics libraries: libfreetype6-dev, libjpeg-dev, libpng-dev, libtiff-dev","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"package-building","dir":"","previous_headings":"Build and Testing Commands","what":"Package Building","title":"GitHub Copilot Instructions for bregr R Package","text":"Timing: Quick build ~10-20 seconds, Full build ~5-10 minutes","code":"# Quick build (without vignettes) - recommended for development R CMD build . --no-build-vignettes  # Full build (with vignettes) - for release R CMD build ."},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"package-checking","dir":"","previous_headings":"Build and Testing Commands","what":"Package Checking","title":"GitHub Copilot Instructions for bregr R Package","text":"Timing: Quick check ~2-3 minutes, Full check ~10-15 minutes","code":"# Quick check (skip suggested packages) _R_CHECK_FORCE_SUGGESTS_=false R CMD check package_*.tar.gz --no-manual  # Full check (requires all suggested packages) R CMD check package_*.tar.gz --no-manual"},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"running-tests","dir":"","previous_headings":"Build and Testing Commands","what":"Running Tests","title":"GitHub Copilot Instructions for bregr R Package","text":"Timing: Local install ~10-15 seconds, Tests ~30-60 seconds","code":"# Install package locally first R --slave -e \"pak::local_install('.')\"  # Run tests R --slave -e \"testthat::test_dir('tests/testthat')\"  # Test basic functionality R --slave -e \"library(bregr); mtcars_result <- br_pipeline(mtcars[1:10,], y='mpg', x=c('cyl','disp'), method='gaussian'); print('Success!')\""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"documentation-building","dir":"","previous_headings":"Build and Testing Commands","what":"Documentation Building","title":"GitHub Copilot Instructions for bregr R Package","text":"Timing: pkgdown build ~2-5 minutes, documentation update ~30 seconds","code":"# Build pkgdown site R --slave -e \"pkgdown::build_site()\"  # Update documentation R --slave -e \"devtools::document()\""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"core-features","dir":"","previous_headings":"Package Functionality","what":"Core Features","title":"GitHub Copilot Instructions for bregr R Package","text":"br_pipeline(): Main function batch regression modeling br_show_*(): Visualization functions (forest plots, tables, networks) Support multiple regression methods: gaussian, binomial, cox, etc. Tidy output format compatible broom ecosystem","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"supported-models","dir":"","previous_headings":"Package Functionality","what":"Supported Models","title":"GitHub Copilot Instructions for bregr R Package","text":"Linear regression (gaussian) Logistic regression (binomial) Cox proportional hazards (coxph) Poisson regression (poisson) (see vignettes full list)","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"example-usage","dir":"","previous_headings":"Package Functionality","what":"Example Usage","title":"GitHub Copilot Instructions for bregr R Package","text":"","code":"library(bregr)  # Simple linear regression example result <- br_pipeline(   data = mtcars,   y = \"mpg\",   x = c(\"cyl\", \"disp\", \"hp\"),   method = \"gaussian\" )  # Visualize results br_show_forest(result) br_show_table(result)"},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"making-changes","dir":"","previous_headings":"Development Workflow","what":"Making Changes","title":"GitHub Copilot Instructions for bregr R Package","text":"Edit R functions R/ directory Update documentation roxygen2 comments Run devtools::document() update man files Test changes testthat::test_dir('tests/testthat') Build check package R CMD build R CMD check","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"adding-new-functions","dir":"","previous_headings":"Development Workflow","what":"Adding New Functions","title":"GitHub Copilot Instructions for bregr R Package","text":"Create function appropriate R file R/ directory Add roxygen2 documentation @export public function Add unit tests tests/testthat/ Update NAMESPACE devtools::document() Consider adding examples vignettes ’s major feature","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"performance-considerations","dir":"","previous_headings":"Development Workflow","what":"Performance Considerations","title":"GitHub Copilot Instructions for bregr R Package","text":"Use pak instead install.packages() faster package management Skip vignette building development iterations Use _R_CHECK_FORCE_SUGGESTS_=false faster checking Consider parallel testing large test suites","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"build-issues","dir":"","previous_headings":"Common Issues and Solutions","what":"Build Issues","title":"GitHub Copilot Instructions for bregr R Package","text":"Vignette build failures: Often due missing suggested packages, build without vignettes development Dependency conflicts: Use pak::pak_sitrep() diagnose issues System library missing: pak usually install automatically, check error messages","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"testing-issues","dir":"","previous_headings":"Common Issues and Solutions","what":"Testing Issues","title":"GitHub Copilot Instructions for bregr R Package","text":"Package found errors: Make sure install package locally pak::local_install('.') Suggested package errors: Install missing packages use _R_CHECK_FORCE_SUGGESTS_=false","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"documentation-issues","dir":"","previous_headings":"Common Issues and Solutions","what":"Documentation Issues","title":"GitHub Copilot Instructions for bregr R Package","text":"Missing exports: Add @export roxygen2 comments run devtools::document() Cross-reference errors: Check referenced packages available","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"performance-metrics-typical-timings","dir":"","previous_headings":"","what":"Performance Metrics (Typical Timings)","title":"GitHub Copilot Instructions for bregr R Package","text":"rig setup: ~1 minute R installation: ~5-8 minutes Package dependencies: ~4-6 minutes Quick build: ~10-20 seconds Quick check: ~2-3 minutes Local install: ~10-15 seconds Test suite: ~30-60 seconds pkgdown build: ~2-5 minutes Full check: ~10-15 minutes Full build vignettes: ~5-10 minutes","code":""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"best-practices","dir":"","previous_headings":"","what":"Best Practices","title":"GitHub Copilot Instructions for bregr R Package","text":"Use rig pak: Modern, faster alternatives traditional R installation package management Incremental development: Use quick builds checks development Test early often: Install locally test significant change Documentation-driven development: Keep roxygen2 comments date Leverage CI/CD: Let GitHub Actions handle full checks pull requests Version control: Use meaningful commit messages atomic commits","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"package-manager-issues","dir":"","previous_headings":"Troubleshooting","what":"Package Manager Issues","title":"GitHub Copilot Instructions for bregr R Package","text":"","code":"# Update pak R --slave -e \"pak::pak_update()\"  # Clear pak cache R --slave -e \"pak::cache_clean()\"  # Check pak status R --slave -e \"pak::pak_sitrep()\""},{"path":"https://wanglabcsu.github.io/bregr/copilot-instructions.html","id":"r-environment-issues","dir":"","previous_headings":"Troubleshooting","what":"R Environment Issues","title":"GitHub Copilot Instructions for bregr R Package","text":"setup provides modern, efficient development environment bregr R package using best practices contemporary tools.","code":"# List installed R versions rig list  # Switch R version if needed rig default 4.5.1  # Check R configuration R --slave -e \"sessionInfo()\""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"bregr-easy-and-efficient-batch-processing-of-regression-models-in-r-","dir":"","previous_headings":"","what":"Easy and Efficient Batch Processing of Regression Models","title":"Easy and Efficient Batch Processing of Regression Models","text":"bregr package revolutionizes batch regression modeling R, enabling run hundreds models simultaneously clean, intuitive workflow. Designed univariate multivariate analyses, delivers tidy-formatted results publication-ready visualizations, transforming cumbersome statistical workflows efficient pipelines.","code":""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"key-features","dir":"","previous_headings":"","what":"Key Features","title":"Easy and Efficient Batch Processing of Regression Models","text":"🚀 Batch Processing: Automate regression modeling across multiple dependent/independent variables. 📊 Tidy Output: Structured results compatible tidyverse seamless downstream analysis. 📈 Integrated Visualization: One-command forest plots model diagnostics. ⚡️ Unified Workflow: Chain operations native R pipes (|>). 📦 Model Agnostic: Supports linear models, Cox regression, .","code":""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"batch-regression-modeling-overview","dir":"","previous_headings":"","what":"Batch Regression Modeling Overview","title":"Easy and Efficient Batch Processing of Regression Models","text":"Batch regression streamlines analyses : model shares identical control variables (c1c_1, c2c_2, …). Focal predictors (x1x_1, x2x_2, …) response variables (y1y_1, y2y_2, …) vary systematically. simplified overview batch regression modeling given illustration:","code":""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Easy and Efficient Batch Processing of Regression Models","text":"can install stable version bregr CRAN : Alternatively, install development version r-universe : GitHub :","code":"install.packages(\"bregr\") install.packages('bregr', repos = c('https://wanglabcsu.r-universe.dev', 'https://cloud.r-project.org')) #install.packages(\"remotes\") remotes::install_github(\"WangLabCSU/bregr\")"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Easy and Efficient Batch Processing of Regression Models","text":"Load package(s): Load data: bregr designed implemented following Tidy design principles Tidyverse style guide, making intuitive user-friendly.","code":"library(bregr) #> Welcome to 'bregr' package! #> ======================================================================= #> You are using bregr version 1.0.0.9000 #>  #> Project home : https://github.com/WangLabCSU/bregr #> Documentation: https://wanglabcsu.github.io/bregr/ #> Cite as      : arXiv:2110.14232 #> ======================================================================= #> lung <- survival::lung |>   dplyr::filter(ph.ecog != 3) lung$ph.ecog <- factor(lung$ph.ecog)"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"core-workflow","dir":"","previous_headings":"Usage","what":"Core workflow","title":"Easy and Efficient Batch Processing of Regression Models","text":"Define construct batch models:","code":"mds <- breg(lung) |> # Init breg object   br_set_y(c(\"time\", \"status\")) |> # Survival outcomes   br_set_x(colnames(lung)[6:10]) |> # Focal predictors   br_set_x2(c(\"age\", \"sex\")) |> # Controls   br_set_model(\"coxph\") |> # Cox Proportional Hazards   br_run() # Execute models #> exponentiate estimates of model(s) constructed from coxph method at default"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"one-step-pipeline","dir":"","previous_headings":"Usage","what":"One-Step Pipeline","title":"Easy and Efficient Batch Processing of Regression Models","text":"Run parallel: Two global options introduced control whether models saved local files (bregr.save_model, default FALSE) saved (bregr.path, default uses temporary path).","code":"mds <- br_pipeline(   lung,   y = c(\"time\", \"status\"),   x = colnames(lung)[6:10],   x2 = c(\"age\", \"sex\"),   method = \"coxph\" ) mds_p <- br_pipeline(   lung,   y = c(\"time\", \"status\"),   x = colnames(lung)[6:10],   x2 = c(\"age\", \"sex\"),   method = \"coxph\",   n_workers = 3 ) #> exponentiate estimates of model(s) constructed from coxph method at default #> ■■■■■■■                           20% | ETA: 46s #> all.equal(mds, mds_p) #> [1] TRUE"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"output-inspection","dir":"","previous_headings":"Usage","what":"Output Inspection","title":"Easy and Efficient Batch Processing of Regression Models","text":"Use br_get_*() function family access attributes data result breg object.","code":"br_get_models(mds) # Raw model objects #> $ph.ecog #> Call: #> survival::coxph(formula = survival::Surv(time, status) ~ ph.ecog +  #>     age + sex, data = data) #>  #>               coef exp(coef)  se(coef)      z        p #> ph.ecog1  0.409836  1.506571  0.199606  2.053  0.04005 #> ph.ecog2  0.902321  2.465318  0.228092  3.956 7.62e-05 #> age       0.010777  1.010836  0.009312  1.157  0.24713 #> sex      -0.545631  0.579476  0.168229 -3.243  0.00118 #>  #> Likelihood ratio test=28.94  on 4 df, p=8.052e-06 #> n= 226, number of events= 163  #>  #> $ph.karno #> Call: #> survival::coxph(formula = survival::Surv(time, status) ~ ph.karno +  #>     age + sex, data = data) #>  #>               coef exp(coef)  se(coef)      z       p #> ph.karno -0.012238  0.987837  0.005946 -2.058 0.03957 #> age       0.012615  1.012695  0.009462  1.333 0.18244 #> sex      -0.485116  0.615626  0.168170 -2.885 0.00392 #>  #> Likelihood ratio test=17.21  on 3 df, p=0.0006413 #> n= 225, number of events= 162  #>    (1 observation deleted due to missingness) #>  #> $pat.karno #> Call: #> survival::coxph(formula = survival::Surv(time, status) ~ pat.karno +  #>     age + sex, data = data) #>  #>                coef exp(coef)  se(coef)      z        p #> pat.karno -0.018736  0.981439  0.005676 -3.301 0.000964 #> age        0.011672  1.011740  0.009381  1.244 0.213436 #> sex       -0.505205  0.603382  0.169452 -2.981 0.002869 #>  #> Likelihood ratio test=23.07  on 3 df, p=3.896e-05 #> n= 223, number of events= 160  #>    (3 observations deleted due to missingness) #>  #> $meal.cal #> Call: #> survival::coxph(formula = survival::Surv(time, status) ~ meal.cal +  #>     age + sex, data = data) #>  #>                coef  exp(coef)   se(coef)      z      p #> meal.cal -0.0001535  0.9998465  0.0002409 -0.637 0.5239 #> age       0.0149375  1.0150496  0.0106016  1.409 0.1588 #> sex      -0.4775830  0.6202808  0.1914559 -2.494 0.0126 #>  #> Likelihood ratio test=10.1  on 3 df, p=0.0177 #> n= 179, number of events= 132  #>    (47 observations deleted due to missingness) #>  #> $wt.loss #> Call: #> survival::coxph(formula = survival::Surv(time, status) ~ wt.loss +  #>     age + sex, data = data) #>  #>               coef  exp(coef)   se(coef)      z       p #> wt.loss -0.0002676  0.9997324  0.0062908 -0.043 0.96607 #> age      0.0199314  1.0201314  0.0097178  2.051 0.04027 #> sex     -0.5067253  0.6024652  0.1748697 -2.898 0.00376 #>  #> Likelihood ratio test=13.87  on 3 df, p=0.003086 #> n= 212, number of events= 150  #>    (14 observations deleted due to missingness) br_get_results(mds) # Comprehensive estimates #> # A tibble: 17 × 21 #>    Focal_variable term      variable  var_label var_class var_type   var_nlevels #>    <chr>          <chr>     <chr>     <chr>     <chr>     <chr>            <int> #>  1 ph.ecog        ph.ecog0  ph.ecog   ph.ecog   factor    categoric…           3 #>  2 ph.ecog        ph.ecog1  ph.ecog   ph.ecog   factor    categoric…           3 #>  3 ph.ecog        ph.ecog2  ph.ecog   ph.ecog   factor    categoric…           3 #>  4 ph.ecog        age       age       age       numeric   continuous          NA #>  5 ph.ecog        sex       sex       sex       numeric   continuous          NA #>  6 ph.karno       ph.karno  ph.karno  ph.karno  numeric   continuous          NA #>  7 ph.karno       age       age       age       numeric   continuous          NA #>  8 ph.karno       sex       sex       sex       numeric   continuous          NA #>  9 pat.karno      pat.karno pat.karno pat.karno numeric   continuous          NA #> 10 pat.karno      age       age       age       numeric   continuous          NA #> 11 pat.karno      sex       sex       sex       numeric   continuous          NA #> 12 meal.cal       meal.cal  meal.cal  meal.cal  numeric   continuous          NA #> 13 meal.cal       age       age       age       numeric   continuous          NA #> 14 meal.cal       sex       sex       sex       numeric   continuous          NA #> 15 wt.loss        wt.loss   wt.loss   wt.loss   numeric   continuous          NA #> 16 wt.loss        age       age       age       numeric   continuous          NA #> 17 wt.loss        sex       sex       sex       numeric   continuous          NA #> # ℹ 14 more variables: contrasts <chr>, contrasts_type <chr>, #> #   reference_row <lgl>, label <chr>, n_obs <dbl>, n_ind <dbl>, n_event <dbl>, #> #   exposure <dbl>, estimate <dbl>, std.error <dbl>, statistic <dbl>, #> #   p.value <dbl>, conf.low <dbl>, conf.high <dbl> br_get_results(mds, tidy = TRUE) # Tidy-formatted coefficients #> # A tibble: 16 × 8 #>    Focal_variable term   estimate std.error statistic p.value conf.low conf.high #>    <chr>          <chr>     <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #>  1 ph.ecog        ph.ec…    1.51   0.200       2.05   4.01e-2    1.02      2.23  #>  2 ph.ecog        ph.ec…    2.47   0.228       3.96   7.62e-5    1.58      3.86  #>  3 ph.ecog        age       1.01   0.00931     1.16   2.47e-1    0.993     1.03  #>  4 ph.ecog        sex       0.579  0.168      -3.24   1.18e-3    0.417     0.806 #>  5 ph.karno       ph.ka…    0.988  0.00595    -2.06   3.96e-2    0.976     0.999 #>  6 ph.karno       age       1.01   0.00946     1.33   1.82e-1    0.994     1.03  #>  7 ph.karno       sex       0.616  0.168      -2.88   3.92e-3    0.443     0.856 #>  8 pat.karno      pat.k…    0.981  0.00568    -3.30   9.64e-4    0.971     0.992 #>  9 pat.karno      age       1.01   0.00938     1.24   2.13e-1    0.993     1.03  #> 10 pat.karno      sex       0.603  0.169      -2.98   2.87e-3    0.433     0.841 #> 11 meal.cal       meal.…    1.000  0.000241   -0.637  5.24e-1    0.999     1.00  #> 12 meal.cal       age       1.02   0.0106      1.41   1.59e-1    0.994     1.04  #> 13 meal.cal       sex       0.620  0.191      -2.49   1.26e-2    0.426     0.903 #> 14 wt.loss        wt.lo…    1.000  0.00629    -0.0425 9.66e-1    0.987     1.01  #> 15 wt.loss        age       1.02   0.00972     2.05   4.03e-2    1.00      1.04  #> 16 wt.loss        sex       0.602  0.175      -2.90   3.76e-3    0.428     0.849"},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"forest-plot-key-results","dir":"","previous_headings":"Usage > Visualization","what":"Forest Plot (Key Results)","title":"Easy and Efficient Batch Processing of Regression Models","text":"bregr mainly provides br_show_forest() plotting data table modeling results.  can tune plot keep focal variables adjust limits x axis.  also provide interfaces packages plotting constructed model(s), e.g., br_show_forest_ggstats(), br_show_forest_ggstatsplot(), br_show_fitted_line(), br_show_fitted_line_2d(). Cox-PH modeling results (focal variables must continuous type), provide risk network plotting function.","code":"br_show_forest(mds) br_show_forest(   mds,   rm_controls = TRUE, # Focus on focal predictors   xlim = c(0, 3), # Custom axis scaling   #   Use x_trans = \"log\" to transform the axis   #   Use log_first = TRUE to transform both   #       the axis and estimate table   drop = 1 # Remove redundant columns ) mds2 <- br_pipeline(   survival::lung,   y = c(\"time\", \"status\"),   x = colnames(survival::lung)[6:10],   x2 = c(\"age\", \"sex\"),   method = \"coxph\" ) #> exponentiate estimates of model(s) constructed from coxph method at default br_show_risk_network(mds2) #> please note only continuous focal terms analyzed and visualized"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"model-score-prediction-and-survival-curves","dir":"","previous_headings":"Usage > Visualization","what":"Model Score Prediction and Survival Curves","title":"Easy and Efficient Batch Processing of Regression Models","text":"Cox-PH models, can generate model predictions (risk scores) create survival curves grouped scores:","code":"# Generate model predictions scores <- br_predict(mds2, idx = \"ph.ecog\") #> `type` is not specified, use lp for the model #> Warning: Some predictions are NA, consider checking your data for missing #> values head(scores) #>          1          2          3          4          5          6  #>  0.3692998 -0.1608293 -0.2936304  0.1811648 -0.2493634  0.3692998 # Create survival curves based on model scores br_show_survival_curves(   mds2,   idx = \"ph.ecog\",   n_groups = 3,   title = \"Survival Curves by 'ph.ecog' Model Risk Score\" ) #> Warning: Some predictions are NA, consider checking your data for missing #> values"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"table","dir":"","previous_headings":"Usage","what":"Table","title":"Easy and Efficient Batch Processing of Regression Models","text":"Show tidy table result pretty table: markdown table: HTML table:","code":"br_show_table(mds) #>    Focal_variable      term estimate std.error statistic p.value     conf.int #> 1         ph.ecog  ph.ecog1     1.51      0.20      2.05  0.040  [1.02, 2.23] #> 2         ph.ecog  ph.ecog2     2.47      0.23      3.96  < .001 [1.58, 3.86] #> 3         ph.ecog       age     1.01  9.31e-03      1.16  0.247  [0.99, 1.03] #> 4         ph.ecog       sex     0.58      0.17     -3.24  0.001  [0.42, 0.81] #> 5        ph.karno  ph.karno     0.99  5.95e-03     -2.06  0.040  [0.98, 1.00] #> 6        ph.karno       age     1.01  9.46e-03      1.33  0.182  [0.99, 1.03] #> 7        ph.karno       sex     0.62      0.17     -2.88  0.004  [0.44, 0.86] #> 8       pat.karno pat.karno     0.98  5.68e-03     -3.30  < .001 [0.97, 0.99] #> 9       pat.karno       age     1.01  9.38e-03      1.24  0.213  [0.99, 1.03] #> 10      pat.karno       sex     0.60      0.17     -2.98  0.003  [0.43, 0.84] #> 11       meal.cal  meal.cal     1.00  2.41e-04     -0.64  0.524  [1.00, 1.00] #> 12       meal.cal       age     1.02      0.01      1.41  0.159  [0.99, 1.04] #> 13       meal.cal       sex     0.62      0.19     -2.49  0.013  [0.43, 0.90] #> 14        wt.loss   wt.loss     1.00  6.29e-03     -0.04  0.966  [0.99, 1.01] #> 15        wt.loss       age     1.02  9.72e-03      2.05  0.040  [1.00, 1.04] #> 16        wt.loss       sex     0.60      0.17     -2.90  0.004  [0.43, 0.85] br_show_table(mds, export = TRUE) #> Focal_variable |      term | estimate | std.error | statistic | p.value |     conf.int #> -------------------------------------------------------------------------------------- #> ph.ecog        |  ph.ecog1 |     1.51 |      0.20 |      2.05 |  0.040  | [1.02, 2.23] #> ph.ecog        |  ph.ecog2 |     2.47 |      0.23 |      3.96 |  < .001 | [1.58, 3.86] #> ph.ecog        |       age |     1.01 |  9.31e-03 |      1.16 |  0.247  | [0.99, 1.03] #> ph.ecog        |       sex |     0.58 |      0.17 |     -3.24 |  0.001  | [0.42, 0.81] #> ph.karno       |  ph.karno |     0.99 |  5.95e-03 |     -2.06 |  0.040  | [0.98, 1.00] #> ph.karno       |       age |     1.01 |  9.46e-03 |      1.33 |  0.182  | [0.99, 1.03] #> ph.karno       |       sex |     0.62 |      0.17 |     -2.88 |  0.004  | [0.44, 0.86] #> pat.karno      | pat.karno |     0.98 |  5.68e-03 |     -3.30 |  < .001 | [0.97, 0.99] #> pat.karno      |       age |     1.01 |  9.38e-03 |      1.24 |  0.213  | [0.99, 1.03] #> pat.karno      |       sex |     0.60 |      0.17 |     -2.98 |  0.003  | [0.43, 0.84] #> meal.cal       |  meal.cal |     1.00 |  2.41e-04 |     -0.64 |  0.524  | [1.00, 1.00] #> meal.cal       |       age |     1.02 |      0.01 |      1.41 |  0.159  | [0.99, 1.04] #> meal.cal       |       sex |     0.62 |      0.19 |     -2.49 |  0.013  | [0.43, 0.90] #> wt.loss        |   wt.loss |     1.00 |  6.29e-03 |     -0.04 |  0.966  | [0.99, 1.01] #> wt.loss        |       age |     1.02 |  9.72e-03 |      2.05 |  0.040  | [1.00, 1.04] #> wt.loss        |       sex |     0.60 |      0.17 |     -2.90 |  0.004  | [0.43, 0.85] br_show_table(mds, export = TRUE, args_table_export = list(format = \"html\"))"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Easy and Efficient Batch Processing of Regression Models","text":"functions documented package reference, full documentation available package site.","code":""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"coverage","dir":"","previous_headings":"","what":"Coverage","title":"Easy and Efficient Batch Processing of Regression Models","text":"","code":"covr::package_coverage() #> bregr Coverage: 76.48% #> R/98-utils.R: 51.14% #> R/03-accessors.R: 72.50% #> R/04-show.R: 75.87% #> R/02-pipeline.R: 76.32% #> R/06-avail.R: 78.57% #> R/01-class.R: 90.70% #> R/99-zzz.R: 90.91% #> R/05-polar.R: 95.19%"},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"related-projects","dir":"","previous_headings":"","what":"Related Project(s)","title":"Easy and Efficient Batch Processing of Regression Models","text":"ezcox: Easily Process Batch Cox Models","code":""},{"path":"https://wanglabcsu.github.io/bregr/index.html","id":"license","dir":"","previous_headings":"","what":"LICENSE","title":"Easy and Efficient Batch Processing of Regression Models","text":"(GPL-3) Copyright (c) 2025 Shixiang Wang & WangLabCSU team","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/accessors.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessor functions for breg objects — accessors","title":"Accessor functions for breg objects — accessors","text":"functions provide access components breg objects, serving counterparts br_set_*() functions. functions include additional arguments extended functionality.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/accessors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessor functions for breg objects — accessors","text":"","code":"br_get_data(obj)  br_get_y(obj)  br_get_x(obj)  br_get_n_x(obj)  br_get_x2(obj)  br_get_n_x2(obj)  br_get_group_by(obj)  br_get_config(obj)  br_get_models(obj, idx = NULL)  br_get_model(obj, idx)  br_get_model_names(obj)  br_rename_models(obj, new_names)  br_get_results(obj, tidy = FALSE, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/accessors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessor functions for breg objects — accessors","text":"obj breg object. idx Index names (focal variables) model(s) return. Default returns . new_names Character vector replace existing model names. tidy TRUE return tidy (compact) results, otherwise return comprehensive results. tidy results obtained broom::tidy() comprehensive results obtained broom.helpers::tidy_plus_plus(). results can configured run br_run(). ... Subset operations passing dplyr::filter() filter results.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/accessors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessor functions for breg objects — accessors","text":"Output depends function called: br_get_data() returns data.frame. br_get_y(), br_get_x(), br_get_x2() return modeling terms. br_get_n_x() br_get_n_x2() return length terms x x2. br_get_group_by() returns variable(s) group analysis. br_get_config() returns modeling method extra arguments. br_get_models() returns subset constructed models. br_get_model() returns subset constructed models. br_get_model_names() returns model names. br_rename_models() returns renamed object. br_get_results() returns modeling result data.frame.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/accessors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessor functions for breg objects — accessors","text":"","code":"m <- br_pipeline(mtcars,   y = \"mpg\",   x = colnames(mtcars)[2:4],   x2 = \"vs\",   method = \"gaussian\" ) br_get_data(m) #> # A tibble: 32 × 12 #>    .row_names    mpg   cyl  disp    hp  drat    wt  qsec    vs    am  gear  carb #>    <chr>       <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> #>  1 Mazda RX4    21       6  160    110  3.9   2.62  16.5     0     1     4     4 #>  2 Mazda RX4 …  21       6  160    110  3.9   2.88  17.0     0     1     4     4 #>  3 Datsun 710   22.8     4  108     93  3.85  2.32  18.6     1     1     4     1 #>  4 Hornet 4 D…  21.4     6  258    110  3.08  3.22  19.4     1     0     3     1 #>  5 Hornet Spo…  18.7     8  360    175  3.15  3.44  17.0     0     0     3     2 #>  6 Valiant      18.1     6  225    105  2.76  3.46  20.2     1     0     3     1 #>  7 Duster 360   14.3     8  360    245  3.21  3.57  15.8     0     0     3     4 #>  8 Merc 240D    24.4     4  147.    62  3.69  3.19  20       1     0     4     2 #>  9 Merc 230     22.8     4  141.    95  3.92  3.15  22.9     1     0     4     2 #> 10 Merc 280     19.2     6  168.   123  3.92  3.44  18.3     1     0     4     4 #> # ℹ 22 more rows br_get_y(m) #> [1] \"mpg\" br_get_x(m) #> [1] \"cyl\"  \"disp\" \"hp\"   br_get_n_x(m) #> [1] 3 br_get_x2(m) #> [1] \"vs\" br_get_n_x2(m) #> [1] 1 br_get_group_by(m) #> NULL br_get_config(m) #> $method #> [1] \"gaussian\" #>  #> $extra #> [1] \"\" #>  br_get_models(m) #> $cyl #>  #> Call:  stats::glm(formula = mpg ~ cyl + vs, family = stats::gaussian,  #>     data = data) #>  #> Coefficients: #> (Intercept)          cyl           vs   #>     39.6250      -3.0907      -0.9391   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  29 Residual #> Null Deviance:\t    1126  #> Residual Deviance: 306 \tAIC: 171.1 #>  #> $disp #>  #> Call:  stats::glm(formula = mpg ~ disp + vs, family = stats::gaussian,  #>     data = data) #>  #> Coefficients: #> (Intercept)         disp           vs   #>     27.9493      -0.0369       1.4950   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  29 Residual #> Null Deviance:\t    1126  #> Residual Deviance: 308.4 \tAIC: 171.3 #>  #> $hp #>  #> Call:  stats::glm(formula = mpg ~ hp + vs, family = stats::gaussian,  #>     data = data) #>  #> Coefficients: #> (Intercept)           hp           vs   #>    26.96300     -0.05453      2.57622   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  29 Residual #> Null Deviance:\t    1126  #> Residual Deviance: 422.7 \tAIC: 181.4 #>  br_get_models(m, 1) #>  #> Call:  stats::glm(formula = mpg ~ cyl + vs, family = stats::gaussian,  #>     data = data) #>  #> Coefficients: #> (Intercept)          cyl           vs   #>     39.6250      -3.0907      -0.9391   #>  #> Degrees of Freedom: 31 Total (i.e. Null);  29 Residual #> Null Deviance:\t    1126  #> Residual Deviance: 306 \tAIC: 171.1 br_get_n_x2(m) #> [1] 1 br_get_results(m) #> # A tibble: 6 × 18 #>   Focal_variable term  variable var_label var_class var_type   var_nlevels #>   <chr>          <chr> <chr>    <chr>     <chr>     <chr>            <int> #> 1 cyl            cyl   cyl      cyl       numeric   continuous          NA #> 2 cyl            vs    vs       vs        numeric   continuous          NA #> 3 disp           disp  disp     disp      numeric   continuous          NA #> 4 disp           vs    vs       vs        numeric   continuous          NA #> 5 hp             hp    hp       hp        numeric   continuous          NA #> 6 hp             vs    vs       vs        numeric   continuous          NA #> # ℹ 11 more variables: contrasts <chr>, contrasts_type <chr>, #> #   reference_row <lgl>, label <chr>, n_obs <dbl>, estimate <dbl>, #> #   std.error <dbl>, statistic <dbl>, p.value <dbl>, conf.low <dbl>, #> #   conf.high <dbl> br_get_results(m, tidy = TRUE) #> # A tibble: 6 × 8 #>   Focal_variable term  estimate std.error statistic   p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #> 1 cyl            cyl    -3.09     0.558      -5.54    5.70e-6  -4.18     -2.00   #> 2 cyl            vs     -0.939    1.98       -0.475   6.38e-1  -4.81      2.94   #> 3 disp           disp   -0.0369   0.00672    -5.49    6.43e-6  -0.0501   -0.0237 #> 4 disp           vs      1.50     1.65        0.905   3.73e-1  -1.74      4.73   #> 5 hp             hp     -0.0545   0.0145     -3.77    7.52e-4  -0.0829   -0.0262 #> 6 hp             vs      2.58     1.97        1.31    2.01e-1  -1.28      6.44   br_get_results(m, tidy = TRUE, term == \"cyl\") #> # A tibble: 1 × 8 #>   Focal_variable term  estimate std.error statistic   p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>     <dbl>    <dbl>     <dbl> #> 1 cyl            cyl      -3.09     0.558     -5.54   5.70e-6    -4.18     -2.00"},{"path":"https://wanglabcsu.github.io/bregr/reference/avails.html","id":null,"dir":"Reference","previous_headings":"","what":"Package availability — avails","title":"Package availability — avails","text":"Package resource, definitions ready use.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/avails.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Package availability — avails","text":"","code":"br_avail_methods()  br_avail_methods_use_exp()  br_avail_method_config(method)"},{"path":"https://wanglabcsu.github.io/bregr/reference/avails.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Package availability — avails","text":"method Method model construction. See br_avail_methods() available options.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/avails.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Package availability — avails","text":"character vector representing available methods options.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/avails.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Package availability — avails","text":"br_avail_methods(): Returns available modeling methods. correlates br_set_model(). br_avail_methods_use_exp(): Returns available modeling methods set exponentiate=TRUE default bregr. br_avail_method_config(): Returns model configs specified method generate modeling templates.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for breg objects — br_predict","title":"Predict method for breg objects — br_predict","text":"Generate predictions fitted models breg object. Cox regression models, returns linear predictors (log relative hazard). models, returns predicted values.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for breg objects — br_predict","text":"","code":"br_predict(obj, newdata = NULL, idx = NULL, type = NULL)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for breg objects — br_predict","text":"obj breg object fitted models. newdata Optional data frame predictions. NULL, uses original data. idx Model index, integer string. type Type prediction. Cox models: \"lp\" (linear predictor, default) \"risk\" (relative risk). models: \"response\" (default) \"link\".","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for breg objects — br_predict","text":"Typically, numeric vector predictions.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_predict.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for breg objects — br_predict","text":"","code":"# Cox regression example if (requireNamespace(\"survival\", quietly = TRUE)) {   lung <- survival::lung |> dplyr::filter(ph.ecog != 3)   mds <- br_pipeline(     lung,     y = c(\"time\", \"status\"),     x = c(\"age\", \"ph.ecog\"),     x2 = \"sex\",     method = \"coxph\"   )   scores <- br_predict(mds)   head(scores) } #> exponentiate estimates of model(s) constructed from coxph method at default #> `idx` not set, use the first model #> `type` is not specified, use lp for the model #>          1          2          3          4          5          6  #> 0.39429054 0.29301268 0.09045697 0.10733661 0.15797554 0.39429054"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line.html","id":null,"dir":"Reference","previous_headings":"","what":"Show fitted regression line with visreg interface — br_show_fitted_line","title":"Show fitted regression line with visreg interface — br_show_fitted_line","text":"Provides interface visualize model results visreg package, show predictor variable x affects outcome y.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show fitted regression line with visreg interface — br_show_fitted_line","text":"","code":"br_show_fitted_line(breg, idx = 1, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show fitted regression line with visreg interface — br_show_fitted_line","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Length-1 vector. Index name (focal variable) model. different idx br_show_forest_ggstats, one model supported visualized , length-1 vector supported idx. ... Arguments passing visreg::visreg() excepts fit data.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show fitted regression line with visreg interface — br_show_fitted_line","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show fitted regression line with visreg interface — br_show_fitted_line","text":"","code":"if (rlang::is_installed(\"visreg\")) {   m <- br_pipeline(mtcars,     y = \"mpg\",     x = colnames(mtcars)[2:4],     x2 = \"vs\",     method = \"gaussian\"   )    if (interactive()) {     br_show_fitted_line(m)   }   br_show_fitted_line(m, xvar = \"cyl\") } #> subset model list with idx: 1 #> model call: stats::glm(formula = mpg ~ cyl + vs, family = stats::gaussian, data #> = data)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line_2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","title":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","text":"Similar br_show_fitted_line(), visualize two variables interact affect response regression models.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line_2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","text":"","code":"br_show_fitted_line_2d(breg, idx = 1, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line_2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Length-1 vector. Index name (focal variable) model. different idx br_show_forest_ggstats, one model supported visualized , length-1 vector supported idx. ... Arguments passing visreg::visreg2d() excepts fit data.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line_2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_fitted_line_2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show 2d fitted regression line with visreg interface — br_show_fitted_line_2d","text":"","code":"if (rlang::is_installed(\"visreg\")) {   m <- br_pipeline(mtcars,     y = \"mpg\",     x = colnames(mtcars)[2:4],     x2 = \"vs\",     method = \"gaussian\"   )    br_show_fitted_line_2d(m, xvar = \"cyl\", yvar = \"mpg\") } #> model call: stats::glm(formula = mpg ~ cyl + vs, family = stats::gaussian, data #> = data)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a forest plot for regression results — br_show_forest","title":"Show a forest plot for regression results — br_show_forest","text":"function takes regression results formats forest plot display. handles: Formatting estimates, CIs p-values Automatic x-axis limits calculation Cleaning redundant group/focal variable labels Custom subsetting column dropping function uses forestploter::forest() internally actual plotting.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a forest plot for regression results — br_show_forest","text":"","code":"br_show_forest(   breg,   clean = TRUE,   rm_controls = FALSE,   ...,   subset = NULL,   drop = NULL,   tab_headers = NULL,   log_first = FALSE )"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a forest plot for regression results — br_show_forest","text":"breg regression object results (must pass assert_breg_obj_with_results()). clean Logical indicating whether clean/condense redundant group/focal variable labels. TRUE, remove \"Group\" \"Focal\" variable column values result table (performing subset drop), reduce repeat values column \"Group\", \"Focal\", \"Variable\". rm_controls TRUE, remove control terms. ... Additional arguments passed forestploter::forest(), run vignette(\"forestploter-post\", \"forestploter\") see plot options. example, use ticks_at specify custom ticks, generally vector 4-5 elements. subset Expression subsetting results data (br_get_results(breg)). drop Column indices drop display table. tab_headers Character vector custom column headers (must match number displayed columns). log_first Log transformed estimates confident intervals. log scaled axis forest, use x_trans = \"log\".","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a forest plot for regression results — br_show_forest","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a forest plot for regression results — br_show_forest","text":"","code":"m <- br_pipeline(mtcars,   y = \"mpg\",   x = colnames(mtcars)[2:4],   x2 = \"vs\",   method = \"gaussian\" ) br_show_forest(m)  br_show_forest(m, clean = TRUE, drop = 3)  br_show_forest(m, clean = FALSE)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstats.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a forest plot with ggstats interface — br_show_forest_ggstats","title":"Show a forest plot with ggstats interface — br_show_forest_ggstats","text":"Provides interface visualize model results ggstats package.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a forest plot with ggstats interface — br_show_forest_ggstats","text":"","code":"br_show_forest_ggstats(breg, idx = NULL, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a forest plot with ggstats interface — br_show_forest_ggstats","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Index names (focal variables) model(s). ... Arguments passing ggstats::ggcoef_table() ggstats::ggcoef_compare() excepts model.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a forest plot with ggstats interface — br_show_forest_ggstats","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a forest plot with ggstats interface — br_show_forest_ggstats","text":"","code":"if (rlang::is_installed(\"ggstats\")) {   m <- br_pipeline(mtcars,     y = \"mpg\",     x = colnames(mtcars)[2:4],     x2 = \"vs\",     method = \"gaussian\"   )   br_show_forest_ggstats(m) }"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstatsplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","title":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","text":"Provides interface visualize model results ggstatsplot package.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstatsplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","text":"","code":"br_show_forest_ggstatsplot(breg, idx = 1, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstatsplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Length-1 vector. Index name (focal variable) model. different idx br_show_forest_ggstats, one model supported visualized , length-1 vector supported idx. ... Arguments passing ggstatsplot::ggcoefstats() excepts x.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstatsplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_forest_ggstatsplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show a forest plot with ggstatsplot interface — br_show_forest_ggstatsplot","text":"","code":"if (rlang::is_installed(\"ggstats\")) {   m <- br_pipeline(mtcars,     y = \"mpg\",     x = colnames(mtcars)[2:4],     x2 = \"vs\",     method = \"gaussian\"   )   br_show_forest_ggstatsplot(m) }"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_residuals.html","id":null,"dir":"Reference","previous_headings":"","what":"Show residuals vs fitted plot for regression models — br_show_residuals","title":"Show residuals vs fitted plot for regression models — br_show_residuals","text":"function creates residual plots diagnose model fit. can display: Residuals vs fitted values plots individual models Multiple residual plots multiple models selected Customizable plot appearance ggplot2","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_residuals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show residuals vs fitted plot for regression models — br_show_residuals","text":"","code":"br_show_residuals(breg, idx = NULL, plot_type = \"fitted\")"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_residuals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show residuals vs fitted plot for regression models — br_show_residuals","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Index names (focal variables) model(s). NULL (default), models included. length-1, shows residuals single model. length > 1, shows faceted plots multiple models. plot_type Character string specifying type residual plot. Options: \"fitted\" (residuals vs fitted values, default), \"qq\" (Q-Q plot), \"scale_location\" (scale-location plot).","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_residuals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show residuals vs fitted plot for regression models — br_show_residuals","text":"ggplot object","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_residuals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show residuals vs fitted plot for regression models — br_show_residuals","text":"","code":"m <- br_pipeline(mtcars,   y = \"mpg\",   x = colnames(mtcars)[2:4],   x2 = \"vs\",   method = \"gaussian\" )  # Single model residual plot br_show_residuals(m, idx = 1) #> `geom_smooth()` using formula = 'y ~ x'   # Multiple models br_show_residuals(m, idx = c(1, 2)) #> `geom_smooth()` using formula = 'y ~ x'   # All models br_show_residuals(m) #> `geom_smooth()` using formula = 'y ~ x'"},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_risk_network.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show connected risk network plot — br_show_risk_network","text":"","code":"br_show_risk_network(breg, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_risk_network.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show connected risk network plot — br_show_risk_network","text":"breg regression object results (must pass assert_breg_obj_with_results()). ... Arguments passing br_get_results() subsetting data table.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_risk_network.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show connected risk network plot — br_show_risk_network","text":"plot","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_risk_network.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show connected risk network plot — br_show_risk_network","text":"","code":"lung <- survival::lung # Cox-PH regression mod_surv <- br_pipeline(   data = lung,   y = c(\"time\", \"status\"),   x = c(\"age\", \"ph.ecog\", \"ph.karno\"),   x2 = c(\"factor(sex)\"),   method = \"coxph\" ) #> exponentiate estimates of model(s) constructed from coxph method at default p <- br_show_risk_network(mod_surv) #> please note only continuous focal terms analyzed and visualized p"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_survival_curves.html","id":null,"dir":"Reference","previous_headings":"","what":"Show survival curves based on model scores — br_show_survival_curves","title":"Show survival curves based on model scores — br_show_survival_curves","text":"Generate survival curves grouping observations based model prediction scores. function specifically designed Cox regression models creates survival curves comparing different risk groups.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_survival_curves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show survival curves based on model scores — br_show_survival_curves","text":"","code":"br_show_survival_curves(   breg,   idx = NULL,   n_groups = 3,   group_labels = NULL,   title = NULL,   subtitle = NULL )"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_survival_curves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show survival curves based on model scores — br_show_survival_curves","text":"breg breg object fitted Cox regression models. idx Index name model use prediction. NULL, uses first model. n_groups Number groups create based score quantiles. Default 3. group_labels Custom labels groups. NULL, uses \"Low\", \"Medium\", \"High\" 3 groups \"Q1\", \"Q2\", etc. numbers. title Plot title. NULL, generates automatic title. subtitle Plot subtitle.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_survival_curves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show survival curves based on model scores — br_show_survival_curves","text":"ggplot2 object showing survival curves.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_survival_curves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show survival curves based on model scores — br_show_survival_curves","text":"","code":"# \\donttest{ # Cox regression example with survival curves if (requireNamespace(\"survival\", quietly = TRUE)) {   lung <- survival::lung |> dplyr::filter(ph.ecog != 3)   mds <- br_pipeline(     lung,     y = c(\"time\", \"status\"),     x = c(\"age\", \"ph.ecog\"),     x2 = \"sex\",     method = \"coxph\"   )   p <- br_show_survival_curves(mds)   print(p) } #> exponentiate estimates of model(s) constructed from coxph method at default #> `idx` not set, use the first model  # }"},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show model tidy results in table format — br_show_table","text":"","code":"br_show_table(   breg,   ...,   args_table_format = list(),   export = FALSE,   args_table_export = list() )"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show model tidy results in table format — br_show_table","text":"breg regression object results (must pass assert_breg_obj_with_results()). ... Arguments passing br_get_results() subsetting table. args_table_format list arguments passing insight::format_table(). export Logical. TRUE, show table export purpose, e.g., present table Markdown HTML format. args_table_export list arguments passing insight::export_table(). works export TRUE.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show model tidy results in table format — br_show_table","text":"table","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show model tidy results in table format — br_show_table","text":"","code":"m <- br_pipeline(mtcars,   y = \"mpg\",   x = colnames(mtcars)[2:4],   x2 = \"vs\",   method = \"gaussian\" )  br_show_table(m) #>   Focal_variable term estimate std.error statistic p.value       conf.int #> 1            cyl  cyl    -3.09      0.56     -5.54  < .001 [-4.18, -2.00] #> 2            cyl   vs    -0.94      1.98     -0.47  0.638  [-4.81,  2.94] #> 3           disp disp    -0.04  6.72e-03     -5.49  < .001 [-0.05, -0.02] #> 4           disp   vs     1.50      1.65      0.91  0.373  [-1.74,  4.73] #> 5             hp   hp    -0.05      0.01     -3.77  < .001 [-0.08, -0.03] #> 6             hp   vs     2.58      1.97      1.31  0.201  [-1.28,  6.44] br_show_table(m, export = TRUE) #> Focal_variable | term | estimate | std.error | statistic | p.value |       conf.int #> ----------------------------------------------------------------------------------- #> cyl            |  cyl |    -3.09 |      0.56 |     -5.54 |  < .001 | [-4.18, -2.00] #> cyl            |   vs |    -0.94 |      1.98 |     -0.47 |  0.638  | [-4.81,  2.94] #> disp           | disp |    -0.04 |  6.72e-03 |     -5.49 |  < .001 | [-0.05, -0.02] #> disp           |   vs |     1.50 |      1.65 |      0.91 |  0.373  | [-1.74,  4.73] #> hp             |   hp |    -0.05 |      0.01 |     -3.77 |  < .001 | [-0.08, -0.03] #> hp             |   vs |     2.58 |      1.97 |      1.31 |  0.201  | [-1.28,  6.44] if (interactive()) {   br_show_table(m, export = TRUE, args_table_export = list(format = \"html\")) }"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Show regression models with gtsummary interface — br_show_table_gt","title":"Show regression models with gtsummary interface — br_show_table_gt","text":"Provides interface visualize model results gtsummary package table format. check https://www.danieldsjoberg.com/gtsummary/articles/tbl_regression.html#customize-output see possible output customization.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show regression models with gtsummary interface — br_show_table_gt","text":"","code":"br_show_table_gt(breg, idx = NULL, ..., tab_spanner = NULL)"},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show regression models with gtsummary interface — br_show_table_gt","text":"breg regression object results (must pass assert_breg_obj_with_results()). idx Index names (focal variables) model(s). ... Arguments passing gtsummary::tbl_regression() excepts x. tab_spanner (character) Character vector specifying spanning headers. Must length tbls. strings interpreted gt::md. Must length tbls argument. Default NULL, places default spanning header. FALSE, header placed.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show regression models with gtsummary interface — br_show_table_gt","text":"table","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/br_show_table_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Show regression models with gtsummary interface — br_show_table_gt","text":"","code":"if (rlang::is_installed(\"gtsummary\")) {   m <- br_pipeline(mtcars,     y = \"mpg\",     x = colnames(mtcars)[2:4],     x2 = \"vs\",     method = \"gaussian\"   )   br_show_table_gt(m) }     Characteristic                cyl                       disp                       hp            Beta       95% CI       p-value       Beta       95% CI       p-value       Beta       95% CI       p-value     cyl -3.1 -4.2, -2.0 <0.001      vs -0.94 -4.8, 2.9 0.6 1.5 -1.7, 4.7 0.4 2.6 -1.3, 6.4 0.2disp    -0.04 -0.05, -0.02 <0.001   hp       -0.05 -0.08, -0.03 <0.001Abbreviation: CI = Confidence Interval"},{"path":"https://wanglabcsu.github.io/bregr/reference/breg.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a new breg-class object — breg","title":"Creates a new breg-class object — breg","text":"Constructs breg-class object containing regression model specifications results.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/breg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a new breg-class object — breg","text":"","code":"breg(   data = NULL,   y = NULL,   x = NULL,   x2 = NULL,   group_by = NULL,   config = NULL,   models = list(),   results = NULL,   results_tidy = NULL )"},{"path":"https://wanglabcsu.github.io/bregr/reference/breg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a new breg-class object — breg","text":"data data.frame containing modeling data. y Character vector dependent variable names. x Character vector focal independent variable names. x2 Optional character vector control variable names. group_by Optional character vector specifying grouping column. config List model configuration parameters. models List containing fitted model objects. results data.frame model results broom.helpers::tidy_plus_plus(). results_tidy data.frame tidy model results broom::tidy().","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/breg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates a new breg-class object — breg","text":"constructed breg object.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/breg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Creates a new breg-class object — breg","text":"","code":"obj <- breg() obj #> A object of <breg> class with slots: #> • y (response variable): #> • x (focal term): #> • x2 (control term): #> • group_by: #> • data: <tibble[,0]> #> • config: NULL #> • models: <list: > #> • results: <df[,0]> with colnames #> • results_tidy: <df[,0]> with colnames #>  #> Focal term(s) are injected into the model one by one, #> while control term(s) remain constant across all models in the batch. print(obj, raw = TRUE) #> <bregr::breg> #>  @ data        : tibble [0 × 0] (S3: tbl_df/tbl/data.frame) #>  Named list() #>  @ y           : NULL #>  @ x           : NULL #>  @ x2          : NULL #>  @ group_by    : NULL #>  @ config      : NULL #>  @ models      : list() #>  @ results     :'data.frame':\t0 obs. of  0 variables #>  @ results_tidy:'data.frame':\t0 obs. of  0 variables #>  @ n_x         : int 0 #>  @ n_x2        : int 0 #> NULL"},{"path":"https://wanglabcsu.github.io/bregr/reference/bregr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bregr: Easy and Efficient Batch Processing of Regression Models — bregr-package","title":"bregr: Easy and Efficient Batch Processing of Regression Models — bregr-package","text":"Easily process batches univariate multivariate regression models. Returns results tidy format generates visualization plots straightforward interpretation (Wang, Shixiang, et al. (2021) doi:10.48550/arXiv.2110.14232 ).","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/bregr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bregr: Easy and Efficient Batch Processing of Regression Models — bregr-package","text":"Maintainer: Shixiang Wang w_shixiang@163.com (ORCID) Authors: Yun Peng yunyunp96@163.com (ORCID) Chenyang Shu 402221506@qq.com","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":null,"dir":"Reference","previous_headings":"","what":"Modeling and analysis pipeline — pipeline","title":"Modeling and analysis pipeline — pipeline","text":"Provides set functions running batch regression analysis. Combines data setup, model configuration, execution steps single workflow. Supports GLM Cox-PH models options focal/control terms parallel processing.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modeling and analysis pipeline — pipeline","text":"","code":"br_pipeline(   data,   y,   x,   method,   x2 = NULL,   group_by = NULL,   n_workers = 1L,   run_parallel = lifecycle::deprecated(),   model_args = list(),   run_args = list(),   filter_x = FALSE,   filter_na_prop = 0.8,   filter_sd_min = 1e-06,   filter_var_min = 1e-06,   filter_min_levels = 2 )  br_set_y(obj, y)  br_set_x(   obj,   ...,   filter_x = FALSE,   filter_na_prop = 0.8,   filter_sd_min = 1e-06,   filter_var_min = 1e-06,   filter_min_levels = 2 )  br_set_x2(obj, ...)  br_set_model(obj, method, ...)  br_run(   obj,   ...,   group_by = NULL,   n_workers = 1L,   run_parallel = lifecycle::deprecated() )"},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modeling and analysis pipeline — pipeline","text":"data data.frame containing necessary variables analysis. Column names follow R's naming conventions. y Character vector specifying dependent variables (response variables). GLM models, typically single character (e.g., \"outcome\"). Cox-PH models, length-2 vector format c(\"time\", \"status\"). x Character vector specifying focal independent terms (predictors). method Method model construction. name list specifying custom model setting. string representing complex method setting acceptable, e.g., 'quasi(variance = \"mu\", link = \"log\")'. list 4 elements, see br_avail_method_config() examples. x2 Character vector specifying control independent terms (predictor, optional). group_by string specifying group column. n_workers, run_parallel Integer, indicating integer number workers launch, default 1L. >1, run modeling code parallel background. model_args list arguments passed br_set_model(). run_args list arguments passed br_run(). filter_x Logical, whether enable pre-filtering focal variables. Default FALSE. filter_na_prop Numeric, maximum proportion NA values allowed variable. Default 0.8. filter_sd_min Numeric, minimum standard deviation required variable. Default 1e-6. filter_var_min Numeric, minimum variance required variable. Default 1e-6. filter_min_levels Numeric, minimum number unique levels required categorical variables. Default 2. obj object class breg. ... Additional arguments depending called function. br_set_x() passing focal terms characters. br_set_x2() passing control terms characters. br_set_model() passing configurations modeling. br_run() passing configurations obtaining modeling results broom.helpers::tidy_plus_plus(). e.g., default value exponentiate FALSE (coefficients exponentiated). logistic, Cox-PH regressions models, exponentiate set TRUE default.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modeling and analysis pipeline — pipeline","text":"object class breg input values added corresponding slot(s). br_run(), returned object breg object results added slots @results @results_tidy, note @models updated list constructed model object (See accessors).","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modeling and analysis pipeline — pipeline","text":"Please note difference variables terms, e.g., x + poly(x, 2) one variable x, two terms x poly(x, 2).","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"global-options","dir":"Reference","previous_headings":"","what":"Global options","title":"Modeling and analysis pipeline — pipeline","text":"bregr supported global options can set options(). Currently used br_run(). bregr.save_model: TRUE, save model local disk. bregr.path: path save model, default uses temporary directory.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Modeling and analysis pipeline — pipeline","text":"br_pipeline(): --one end end wrapper run regression analysis batch. splitted following steps br_set_y(): Set dependent variables model construction. br_set_x(): Set focal terms model construction. br_set_x2(): Set control terms model construction (Optional pipeline). br_set_model(): Set model configurations. br_run(): Run regression analysis batch.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/pipeline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modeling and analysis pipeline — pipeline","text":"","code":"library(bregr) # 1. Pipeline ------------------------- # 1.1. A single linear model ---------- m <- breg(mtcars) |> # set model data   br_set_y(\"mpg\") |> # set dependent variable   br_set_x(\"qsec\") |> # set focal variables   br_set_model(\"gaussian\") |> # set model   br_run() # run analysis  # get model tidy result br_get_results(m, tidy = TRUE) #> # A tibble: 1 × 8 #>   Focal_variable term  estimate std.error statistic p.value conf.low conf.high #>   <chr>          <chr>    <dbl>     <dbl>     <dbl>   <dbl>    <dbl>     <dbl> #> 1 qsec           qsec      1.41     0.559      2.53  0.0171    0.316      2.51 # or m@results_tidy  # compare with R's built-in function lm(mpg ~ qsec, data = mtcars) |> summary() #>  #> Call: #> lm(formula = mpg ~ qsec, data = mtcars) #>  #> Residuals: #>     Min      1Q  Median      3Q     Max  #> -9.8760 -3.4539 -0.7203  2.2774 11.6491  #>  #> Coefficients: #>             Estimate Std. Error t value Pr(>|t|)   #> (Intercept)  -5.1140    10.0295  -0.510   0.6139   #> qsec          1.4121     0.5592   2.525   0.0171 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 5.564 on 30 degrees of freedom #> Multiple R-squared:  0.1753,\tAdjusted R-squared:  0.1478  #> F-statistic: 6.377 on 1 and 30 DF,  p-value: 0.01708 #>  # 1.2. Batch linear model ------------- # control variables are injected in all constructed models # focal variables are injected in constructed models one by one m2 <- breg(mtcars) |>   br_set_y(\"mpg\") |>   br_set_x(colnames(mtcars)[2:4]) |> # set focal variables   br_set_x2(\"vs\") |> # set control variables   br_set_model(\"gaussian\") |>   br_run() # 1.3. Group by model ------------- m3 <- breg(mtcars) |>   br_set_y(\"mpg\") |>   br_set_x(\"cyl\") |>   br_set_x2(\"wt\") |> # set control variables   br_set_model(\"gaussian\") |>   br_run(group_by = \"am\")  # 2. All-in-one pipeline wrapper --- m4 <- br_pipeline(mtcars,   y = \"mpg\",   x = colnames(mtcars)[2:4],   x2 = \"vs\",   method = \"gaussian\" )  # 3. Customized model ----------- if (FALSE) { # \\dontrun{ dt <- data.frame(x = rnorm(100)) dt$y <- rpois(100, exp(1 + dt$x))  m5 <- breg(dt) |>   br_set_y(\"y\") |>   br_set_x(\"x\") |>   br_set_model(method = 'quasi(variance = \"mu\", link = \"log\")') |>   br_run() } # }"},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_connect.html","id":null,"dir":"Reference","previous_headings":"","what":"Connects dots — polar_connect","title":"Connects dots — polar_connect","text":"Check polar_init() examples.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_connect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Connects dots — polar_connect","text":"","code":"polar_connect(data, mapping, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_connect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Connects dots — polar_connect","text":"data data.frame contains connections events. mapping Set aesthetic mappings ggplot2::geom_segment(). Set mappings x xend required. ... arguments passing ggplot2::geom_segment().","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_connect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Connects dots — polar_connect","text":"ggplot object.","code":""},{"path":[]},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_init.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Init a dot plot in polar system — polar_init","text":"","code":"polar_init(data, mapping, ...)"},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_init.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Init a dot plot in polar system — polar_init","text":"data data.frame contains events, e.g., genes. mapping Set aesthetic mappings ggplot2::geom_point(). set mapping y. ... arguments passing ggplot2::geom_point().","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_init.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Init a dot plot in polar system — polar_init","text":"ggplot object.","code":""},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/polar_init.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Init a dot plot in polar system — polar_init","text":"","code":"library(ggplot2) # ------------------- #  Init a polar plot # -------------------  data <- data.frame(x = LETTERS[1:7])  p1 <- polar_init(data, aes(x = x)) p1   # Set aes value p2 <- polar_init(data, aes(x = x), size = 3, color = \"red\", alpha = 0.5) p2   # Set aes mapping set.seed(123L) data1 <- data.frame(   x = LETTERS[1:7],   shape = c(\"r\", \"r\", \"r\", \"b\", \"b\", \"b\", \"b\"),   color = c(\"r\", \"r\", \"r\", \"b\", \"b\", \"b\", \"b\"),   size = abs(rnorm(7)) ) # Check https://ggplot2.tidyverse.org/reference/geom_point.html # for how to use both stroke and color p3 <- polar_init(data1, aes(x = x, size = size, color = color, shape = shape), alpha = 0.5) p3   # -------------------- #  Connect polar dots # -------------------- data2 <- data.frame(   x1 = LETTERS[1:7],   x2 = c(\"B\", \"C\", \"D\", \"E\", \"C\", \"A\", \"C\"),   color = c(\"r\", \"r\", \"r\", \"b\", \"b\", \"b\", \"b\") ) p4 <- p3 + polar_connect(data2, aes(x = x1, xend = x2)) p4   p5 <- p3 + polar_connect(data2, aes(x = x1, xend = x2, color = color), alpha = 0.8, linetype = 2) p5   # Use two different color scales if (requireNamespace(\"ggnewscale\")) {   library(ggnewscale)   p6 <- p3 +     new_scale(\"color\") +     polar_connect(data2, aes(x = x1, xend = x2, color = color), alpha = 0.8, linetype = 2)   p6 + scale_color_brewer()   p6 + scale_color_manual(values = c(\"darkgreen\", \"magenta\")) }"},{"path":[]},{"path":"https://wanglabcsu.github.io/bregr/reference/print.breg.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for breg object — print.breg","text":"x object class breg. ... Additional arguments (currently used). raw Logical, whether print raw S7 representation. Default FALSE.","code":""},{"path":"https://wanglabcsu.github.io/bregr/reference/print.breg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for breg object — print.breg","text":"Invisibly returns x.","code":""},{"path":"https://wanglabcsu.github.io/bregr/news/index.html","id":"bregr-development-version","dir":"Changelog","previous_headings":"","what":"bregr (development version)","title":"bregr (development version)","text":"Added br_show_residuals() show residuals vs fitted plot regression models. Updated br_set_x() br_set_x2() properly handle different input types, including valid column names (R), invalid column names, model formula terms. Supported error handling model construction failed. Added br_get_model_names() br_rename_models() get set model names. Soft-deprecated run_parallel br_run(). Soft-deprecated br_get_model() merging br_get_models(). Introduced global options “bregr.save_model” “bregr.path”, configurable via options(). Enabled cross-platform parallel computation. Addressed lifecycle deprecation warnings functions ggplot2. Set default exponentiate option appropriately br_run(). Expanded br_avail_methods_use_exp() include c(\"poisson\", \"quasipoisson\"). Added log_first option br_show_forest(). Enhanced compatibility multiple models broom.helpers. Implemented use : interaction term combinations throughout package. Created several new vignettes introduce capabilities bregr. Fixed bug dropping multiple columns failed br_show_forest(). Resolved issue br_get_model() couldn’t properly process multiple string inputs idx parameter.","code":""},{"path":"https://wanglabcsu.github.io/bregr/news/index.html","id":"bregr-100","dir":"Changelog","previous_headings":"","what":"bregr 1.0.0","title":"bregr 1.0.0","text":"CRAN release: 2025-06-28 first experimental version submitted CRAN.","code":""}]
